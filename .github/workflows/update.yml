name: Update Subtrees

on:
    schedule:
        - cron: "0 */4 * * *"
    workflow_dispatch:

jobs:
    update:
        runs-on: ubuntu-latest
        outputs:
            updated: ${{ steps.commit.outputs.updated }}
        permissions:
            contents: write
            actions: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GH_PAT }}

            - name: Configure Git
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"
                  
                  # Set merge strategy to prefer incoming changes for subtree updates
                  git config merge.conflictstyle diff3

            - name: Update all subtrees
              run: |
                  # Define all subtrees to update
                  subtrees=(
                    "keiyoushi|https://github.com/keiyoushi/extensions.git|repo"
                    "yuzono|https://github.com/yuzono/anime-repo.git|repo"
                    "kohi-den|https://kohiden.xyz/Kohi-den/extensions|main"
                  )

                  UPDATES_MADE=false

                  # Function to resolve conflicts automatically
                  resolve_conflicts() {
                    echo "resolving conflicts..."
                    # Accept all incoming changes for conflicts
                    git status --porcelain | grep -E "^(UU|AA|DD|AU|UA|DU|UD)" | awk '{print $2}' | while read file; do
                      git checkout --theirs "$file" 2>/dev/null && git add "$file" || git rm "$file" 2>/dev/null || true
                    done
                    return 0
                  }

                  # Process each subtree
                  for subtree in "${subtrees[@]}"; do
                    IFS='|' read -r name remote branch <<< "$subtree"
                    echo "Processing $name..."
                    
                    git remote add "$name" "$remote" 2>/dev/null || true
                    git fetch "$name" "$branch"

                    # Pull subtree updates
                    if ! git subtree pull --prefix="extensions/$name" "$name" "$branch" --squash; then
                      resolve_conflicts
                      git commit --no-edit 2>/dev/null || true
                    fi
                    
                    UPDATES_MADE=true
                  done

                  echo "UPDATES_MADE=$UPDATES_MADE" >> $GITHUB_ENV

            - name: Commit and push changes
              id: commit
              run: |
                  # Check if there are changes to push
                  git add .
                  git diff --staged --quiet && echo "updated=false" >> $GITHUB_OUTPUT && exit 0

                  # Commit any remaining changes
                  git commit -m "Update extensions to the latest commit" || true

                  # Sync with remote and push
                  MAX_RETRIES=3
                  for i in $(seq 1 $MAX_RETRIES); do
                    git fetch origin main
                    git rebase origin/main && git push origin main && echo "updated=true" >> $GITHUB_OUTPUT && exit 0
                    
                    # Handle rebase conflicts
                    git status --porcelain | grep -E "^(UU|AA|DD)" | awk '{print $2}' | while read file; do
                      git checkout --ours "$file" 2>/dev/null && git add "$file" || git rm "$file" 2>/dev/null || true
                    done
                    git rebase --continue 2>/dev/null || git rebase --abort
                  done

                  echo "Failed to push after $MAX_RETRIES attempts"
                  exit 1

    trigger-workflows:
        needs: update
        runs-on: ubuntu-latest
        if: ${{ needs.update.result == 'success' && needs.update.outputs.updated == 'true' }}
        permissions:
            actions: write
        steps:
            - name: Trigger downstream workflows
              run: |
                  WORKFLOWS=("sync.yml" "deploy.yml" "repo.yml")
                  
                  for workflow in "${WORKFLOWS[@]}"; do
                    echo "Triggering $workflow..."
                    curl -L -X POST \
                      -H "Accept: application/vnd.github+json" \
                      -H "Authorization: Bearer ${{ secrets.GH_PAT }}" \
                      https://api.github.com/repos/${{ github.repository }}/actions/workflows/$workflow/dispatches \
                      -d '{"ref":"main"}' || echo "Failed to trigger $workflow"
                  done
